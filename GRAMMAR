(* L1 EBNF grammar *)

program = { definition | include } ;

include = "include", [ name | str_lit ], ";" ;

definition = { ( vardef, ";" ) | funcdef } ;

vardef  = name, [ "@" ], name, [ ":", literal ] ;

funcdef = name, [ "@" ], name, "(", [ vardef, { ",", vardef } ], ")",
        ( ( ":", statement) | ";" );

(* TODO: structs, unions, enums, etc. *)

statement     = label_stmt | block_stmt | if_stmt | while_stmt | switch_stmt
              | case_stmt | break_stmt | goto_stmt | ret_stmt | rval_stmt ;

label_stmt    = name, ":", stmt ;
block_stmt    = "{", stmt, "}" ;
if_stmt       = "if", "(", rvalue, ")", stmt, [ "else", stmt ] ;
while_stmt    = "while", "(", rvalue, ")", stmt ;
switch_stmt   = "switch", rvalue, stmt ;
case_stmt     = "case", literal, ":", stmt ;
break_stmt    = "break", ";" ;
continue_stmt = "continue", ";" ;
goto_stmt     = "goto", rvalue, ";" ;
ret_stmt      = "ret", [ rvalue ], ";" ;
rval_stmt     = [ rvalue ], ";" ;

rvalue  = "(", rvalue, ")"
        | lvalue
        | literal
        | lvalue, assign, rvalue
        | inc_dec, lvalue
        | lvalue, inc_dec
        | unary, rvalue
        | "%", lvalue
        | rvalue, binary, rvalue
        | rvalue, "(", { rvalue, { ",", rvalue  } }, ")" ;

assign  = "="
        | "-="
        | "+="
        | "%="
        | "*="
        | "/="
        | "&="
        | "|=" ;

inc_dec = "++"
        | "--" ;

unary   = "-"
        | "!" ;

binary  = "|"
        | "&"
        | "=="
        | "!="
        | "or"
        | "and"
        | "<"
        | "<="
        | ">"
        | ">="
        | "<<"
        | ">>"
        | "-"
        | "+"
        | "%"
        | "*"
        | "/" ;

lvalue  = name
        | "@", rvalue ;

literal = num_lit | char_lit | str_lit | bool_lit | "null" ;

num_lit = digit, { digit } ;

char_lit = "'", { char }, "'" ;

str_lit = '"', { char }, '"' ;

bool_lit = "true" | "false" ;

name    = alpha, { alpha | digit } ;

digit   = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

alpha   = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L"
        | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X"
        | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j"
        | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v"
        | "w" | "x" | "y" | "z" | "_" ;

char    = ? all ASCII characters ? ;